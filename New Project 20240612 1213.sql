-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.5.25a


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


--
-- Create schema fileguard
--

CREATE DATABASE IF NOT EXISTS fileguard;
USE fileguard;

--
-- Definition of table `receiverreg`
--

DROP TABLE IF EXISTS `receiverreg`;
CREATE TABLE `receiverreg` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `email` varchar(45) NOT NULL,
  `pass` varchar(45) NOT NULL,
  `status` varchar(45) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `receiverreg`
--

/*!40000 ALTER TABLE `receiverreg` DISABLE KEYS */;
INSERT INTO `receiverreg` (`id`,`name`,`email`,`pass`,`status`) VALUES 
 (1,'asmit','asmit@gmail.com','111','request'),
 (2,'admin','harsh@gmail.com','1111','request'),
 (3,'local','admin@gmail.com','111','request'),
 (4,'harsh','harsh@gmail.com','111','request');
/*!40000 ALTER TABLE `receiverreg` ENABLE KEYS */;


--
-- Definition of table `uploadfile`
--

DROP TABLE IF EXISTS `uploadfile`;
CREATE TABLE `uploadfile` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `filename` longtext,
  `filecontent` longtext,
  `encrypt` longtext,
  `decrypt` longtext,
  `ascii` varchar(45) DEFAULT NULL,
  `secretcode` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=latin1;

--
-- Dumping data for table `uploadfile`
--

/*!40000 ALTER TABLE `uploadfile` DISABLE KEYS */;
INSERT INTO `uploadfile` (`id`,`filename`,`filecontent`,`encrypt`,`decrypt`,`ascii`,`secretcode`) VALUES 
 (16,'bc05 (3).pdf','1474 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 7, NO. 6, DECEMBER 2020\nFig. 5. Erasure channel with erasure probability of e.\n1) How do we add redundancy to the stored data?\n2) How do we distribute the data over multiple nodes?\n3) How do we recover corrupted data? Fig. 6. Probability of error versus erasure probability for repetition code.\n4) How do we redistribute the data as servers are removed\nand added?\nWe can quickly observe for e ? 1 the probability of error\nThus, the questions posed illustrate that the methodology\nis high. This will clearly not be an optimal code which is\nmust adapt as the environment changes. It is not immediately\nillustrated in Fig. 6, although we will use the repetition code\nclear whether the aforementioned problems can be solved\nto illustrate the basic concepts of [16].\nseparately. In particular, if one ?rst calculates the required\nSupposewewouldliketoencodeadatabitusingan r-repeat\nredundancy and designs an error correction code that achieves\ncode. Then, there will be a total of n = r bits to store. Next,\nthe speci?cation, then would simply spreading the data over\nwe distribute the data onto n nodes. If we have a total of\nservers as they go online/of?ine provide the optimal solution?\nm data bits to encode, then we may use the repeat code to\nIn [16], they consider how to add redundancy in such a\nstore m · n data bits on n nodes. If the data server provider\nway that helps to increase the ef?ciency of redistributing\nadds a new server for extra redundancy, then we may choose\nencoded data as additional servers come online. The model\nto transfer the data from the n existing nodes into the new\nof adding redundancy is based on error correcting codes for\nserver. There are multiple strategies we may choose.\nthe erasure channel. A brief overview of considerations in\n3) Broadcast: In the broadcast case, we can have each\napplying erasure error correcting codes to distributed storage\nexisting server send their m bits to the new server, which will\nis provided in [17] and [18]. In [19], they design a new class\nultimately have m · n bits transferred to the new server. This\nof codes and compare them with Reed–Solomon codes. Their\nmethod is decentralized and requires no coordination between\ncodes are applied to the use case of a Hadoop HDFS, and they\nservers.\nclaim a reduction in repair disk I/O and network traf?c asso-\n4) Coordination: On the other hand, we may implement a\nciated with the repairs. Their codes require 14% more storage\ndistributed consensus algorithm, where the individual (honest)\nthan Reed–Solomon codes. Both of the previously mentioned\nservers each play a game of matching pennies, i.e., draw\ncode designs have benchmarksfocused on minimizing I/O and\nrandom bits, and if they match one player wins, if not then\nnetwork traf?c associated with the repair. They are interested j\nthe other wins. Given n = 2 , this algorithm will require j\nin minimizingthe effect of correctingerrorson the system as a i\nrounds, and the ith round transmits 2 bits. Thus the total bits\n\0\nj\nwhole. Below, we provide an example to illustrate the process. i j\ntransmitted will be m + 2 = m + 2 ?1 = m + n ? 1.\ni=1\n1) Background: When data is stored on a ?le system, there\nThis is a little bit of an improvement. It is also possible to\nmay be errors when writing to a disk, or there may be an\nalways choose a particular server, and then the overhead is\nexternal trigger like a power surge which may cause bits\nsimply m bits,theabilitytoselect arandomserverhasmultiple\nto be erased. The simplest channel model for erased bits is\nbene?ts, e.g., security and data diversity.\nthe erasure channel, as shown in Fig. 5. It is simple in that\n5) Precoordination: Another possibility is to distribute\nsense that it is memoryless and erases the current symbol\napriori,arank m, m × n binary matrix. Then, the ith server\nindependently of its previous actions.\nmay calculate the ith bit of the product and send it to the\nA natural question arises, is it possible to reliably trans-\nnew server. The new server may then recover the m bits. This\nmit information across this channel? Shannon answered this\nrequires sending only m bits to the new server and has the\nquestion af?rmatively in [20] and provideda rate at which one\nadvantage that it requires no coordination.\ncould reliably transmit information.The capacity of the binary\nerasure channel is C = 1 ? e. This rate will help us evaluate\nV. RELATED WORK\nhow well a particular code performs. The most optimal of\nstorage schemes for k bits, given an erasure probability of e, Recent studies in defending against ransomware have\nwould then have a total storage requirement of approximately focused on detection and prevention. In [21], an extensive\nn = (k/(1 ? e)) bits. study of 1359 ransomware samples from 2006 to 2014 was\n2) Using a Repeat Code for Distributed Storage: We now performed. In their analysis, they found multiple similarities\nperform a simple analysis of a r-Repeat code, which simply in the activities of the different ransomware families collected.\nmeans we repeat each symbol r times. First, we note the rate They provided examples for detection, such as monitoring\nof this code is (1/r) and calculate the probability of an error abnormal ?le system activity and certain Windows application\nr\nas Prob(error) = p(r erasures) = e programming interface (API) calls.','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','1474 IEEE TRANSACTIONS ON COMPUTATIONAL SOCIAL SYSTEMS, VOL. 7, NO. 6, DECEMBER 2020\nFig. 5. Erasure channel with erasure probability of e.\n1) How do we add redundancy to the stored data?\n2) How do we distribute the data over multiple nodes?\n3) How do we recover corrupted data? Fig. 6. Probability of error versus erasure probability for repetition code.\n4) How do we redistribute the data as servers are removed\nand added?\nWe can quickly observe for e ? 1 the probability of error\nThus, the questions posed illustrate that the methodology\nis high. This will clearly not be an optimal code which is\nmust adapt as the environment changes. It is not immediately\nillustrated in Fig. 6, although we will use the repetition code\nclear whether the aforementioned problems can be solved\nto illustrate the basic concepts of [16].\nseparately. In particular, if one ?rst calculates the required\nSupposewewouldliketoencodeadatabitusingan r-repeat\nredundancy and designs an error correction code that achieves\ncode. Then, there will be a total of n = r bits to store. Next,\nthe speci?cation, then would simply spreading the data over\nwe distribute the data onto n nodes. If we have a total of\nservers as they go online/of?ine provide the optimal solution?\nm data bits to encode, then we may use the repeat code to\nIn [16], they consider how to add redundancy in such a\nstore m · n data bits on n nodes. If the data server provider\nway that helps to increase the ef?ciency of redistributing\nadds a new server for extra redundancy, then we may choose\nencoded data as additional servers come online. The model\nto transfer the data from the n existing nodes into the new\nof adding redundancy is based on error correcting codes for\nserver. There are multiple strategies we may choose.\nthe erasure channel. A brief overview of considerations in\n3) Broadcast: In the broadcast case, we can have each\napplying erasure error correcting codes to distributed storage\nexisting server send their m bits to the new server, which will\nis provided in [17] and [18]. In [19], they design a new class\nultimately have m · n bits transferred to the new server. This\nof codes and compare them with Reed–Solomon codes. Their\nmethod is decentralized and requires no coordination between\ncodes are applied to the use case of a Hadoop HDFS, and they\nservers.\nclaim a reduction in repair disk I/O and network traf?c asso-\n4) Coordination: On the other hand, we may implement a\nciated with the repairs. Their codes require 14% more storage\ndistributed consensus algorithm, where the individual (honest)\nthan Reed–Solomon codes. Both of the previously mentioned\nservers each play a game of matching pennies, i.e., draw\ncode designs have benchmarksfocused on minimizing I/O and\nrandom bits, and if they match one player wins, if not then\nnetwork traf?c associated with the repair. They are interested j\nthe other wins. Given n = 2 , this algorithm will require j\nin minimizingthe effect of correctingerrorson the system as a i\nrounds, and the ith round transmits 2 bits. Thus the total bits\n\0\nj\nwhole. Below, we provide an example to illustrate the process. i j\ntransmitted will be m + 2 = m + 2 ?1 = m + n ? 1.\ni=1\n1) Background: When data is stored on a ?le system, there\nThis is a little bit of an improvement. It is also possible to\nmay be errors when writing to a disk, or there may be an\nalways choose a particular server, and then the overhead is\nexternal trigger like a power surge which may cause bits\nsimply m bits,theabilitytoselect arandomserverhasmultiple\nto be erased. The simplest channel model for erased bits is\nbene?ts, e.g., security and data diversity.\nthe erasure channel, as shown in Fig. 5. It is simple in that\n5) Precoordination: Another possibility is to distribute\nsense that it is memoryless and erases the current symbol\napriori,arank m, m × n binary matrix. Then, the ith server\nindependently of its previous actions.\nmay calculate the ith bit of the product and send it to the\nA natural question arises, is it possible to reliably trans-\nnew server. The new server may then recover the m bits. This\nmit information across this channel? Shannon answered this\nrequires sending only m bits to the new server and has the\nquestion af?rmatively in [20] and provideda rate at which one\nadvantage that it requires no coordination.\ncould reliably transmit information.The capacity of the binary\nerasure channel is C = 1 ? e. This rate will help us evaluate\nV. RELATED WORK\nhow well a particular code performs. The most optimal of\nstorage schemes for k bits, given an erasure probability of e, Recent studies in defending against ransomware have\nwould then have a total storage requirement of approximately focused on detection and prevention. In [21], an extensive\nn = (k/(1 ? e)) bits. study of 1359 ransomware samples from 2006 to 2014 was\n2) Using a Repeat Code for Distributed Storage: We now performed. In their analysis, they found multiple similarities\nperform a simple analysis of a r-Repeat code, which simply in the activities of the different ransomware families collected.\nmeans we repeat each symbol r times. First, we note the rate They provided examples for detection, such as monitoring\nof this code is (1/r) and calculate the probability of an error abnormal ?le system activity and certain Windows application\nr\nas Prob(error) = p(r erasures) = e programming interface (API) calls.','119','385');
/*!40000 ALTER TABLE `uploadfile` ENABLE KEYS */;




/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
